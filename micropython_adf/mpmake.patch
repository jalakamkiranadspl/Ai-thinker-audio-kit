diff --git a/extmod/moduhashlib.c b/extmod/moduhashlib.c
index 603cdb44a..b22beaa70 100644
--- a/extmod/moduhashlib.c
+++ b/extmod/moduhashlib.c
@@ -102,6 +102,12 @@ STATIC mp_obj_t uhashlib_sha256_digest(mp_obj_t self_in) {
     return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
 }
 
+STATIC mp_obj_t uhashlib_sha256_copy(mp_obj_t self_in) {
+    mp_obj_hash_t *o = m_new_obj_var(mp_obj_hash_t, char, sizeof(mbedtls_sha256_context));
+    memcpy(o, self_in, sizeof(*o) + sizeof(mbedtls_sha256_context));
+    return MP_OBJ_FROM_PTR(o);
+}
+STATIC MP_DEFINE_CONST_FUN_OBJ_1(uhashlib_sha256_copy_obj, uhashlib_sha256_copy);
 #else
 
 #include "crypto-algorithms/sha256.c"
@@ -140,6 +146,9 @@ STATIC MP_DEFINE_CONST_FUN_OBJ_1(uhashlib_sha256_digest_obj, uhashlib_sha256_dig
 STATIC const mp_rom_map_elem_t uhashlib_sha256_locals_dict_table[] = {
     { MP_ROM_QSTR(MP_QSTR_update), MP_ROM_PTR(&uhashlib_sha256_update_obj) },
     { MP_ROM_QSTR(MP_QSTR_digest), MP_ROM_PTR(&uhashlib_sha256_digest_obj) },
+    { MP_ROM_QSTR(MP_QSTR_copy), MP_ROM_PTR(&uhashlib_sha256_copy_obj) },
+    { MP_ROM_QSTR(MP_QSTR_digest_size), MP_ROM_INT(32) },
+    { MP_ROM_QSTR(MP_QSTR_block_size), MP_ROM_INT(64) },
 };
 
 STATIC MP_DEFINE_CONST_DICT(uhashlib_sha256_locals_dict, uhashlib_sha256_locals_dict_table);
diff --git a/ports/esp32/Makefile b/ports/esp32/Makefile
index 37261d17b..4f90b9491 100644
--- a/ports/esp32/Makefile
+++ b/ports/esp32/Makefile
@@ -291,6 +291,15 @@ endif
 LIBC_LIBM = $(ESPCOMP)/newlib/lib/libc.a $(ESPCOMP)/newlib/lib/libm.a
 endif
 
+################################################################################
+# ADF environment
+ifeq ($(ADF_PATH),)
+$(info The ADF_PATH variable has not been set, please set it to the root of the esp-adf repository.)
+$(error ADF_PATH not set)
+endif
+
+include $(ADF_PATH)/micropython_adf/mpadfenv.mk
+
 ################################################################################
 # List of MicroPython source and object files
 
@@ -355,6 +364,8 @@ DRIVERS_SRC_C = $(addprefix drivers/,\
 	dht/dht.c \
 	)
 
+include $(ADF_PATH)/micropython_adf/mod/mpmod.mk
+
 OBJ_MP =
 OBJ_MP += $(PY_O)
 OBJ_MP += $(addprefix $(BUILD)/, $(SRC_C:.c=.o))
@@ -602,6 +613,8 @@ else
 $(eval $(call gen_espidf_lib_rule,ethernet,$(ESPIDF_ETHERNET_O)))
 endif
 
+include $(ADF_PATH)/micropython_adf/mpadfobj.mk
+
 # Create all destination build dirs before compiling IDF source
 OBJ_ESPIDF_DIRS = $(sort $(dir $(OBJ_ESPIDF))) $(BUILD_ESPIDF_LIB) $(addprefix $(BUILD_ESPIDF_LIB)/,$(LIB_ESPIDF))
 $(OBJ_ESPIDF): | $(OBJ_ESPIDF_DIRS)
@@ -719,6 +732,7 @@ APP_LD_ARGS += -L$(ESPCOMP)/esp32/lib -lcore -lmesh -lnet80211 -lphy -lrtc -lpp
 endif
 APP_LD_ARGS += $(OBJ)
 APP_LD_ARGS += $(LIB)
+include $(ADF_PATH)/micropython_adf/mpadflibs.mk
 APP_LD_ARGS += --end-group
 
 $(BUILD)/esp32_out.ld: $(SDKCONFIG_H)
diff --git a/ports/esp32/main.c b/ports/esp32/main.c
index b0d1b1537..90e5b3766 100644
--- a/ports/esp32/main.c
+++ b/ports/esp32/main.c
@@ -33,6 +33,7 @@
 #include "freertos/FreeRTOS.h"
 #include "freertos/task.h"
 #include "esp_system.h"
+#include "esp_heap_caps_init.h"
 #include "nvs_flash.h"
 #include "esp_task.h"
 #include "soc/cpu.h"
@@ -85,7 +86,7 @@ void mp_task(void *pvParameter) {
             break;
         case ESP_SPIRAM_SIZE_32MBITS:
         case ESP_SPIRAM_SIZE_64MBITS:
-            mp_task_heap_size = 4 * 1024 * 1024;
+            mp_task_heap_size = 3 * 1024 * 1024;
             break;
         default:
             // No SPIRAM, fallback to normal allocation
@@ -93,6 +94,7 @@ void mp_task(void *pvParameter) {
             mp_task_heap = malloc(mp_task_heap_size);
             break;
     }
+    heap_caps_add_region((intptr_t)(mp_task_heap + 3 * 1024 * 1024), (intptr_t)(mp_task_heap + 4 * 1024 * 1024 - 1));
     #else
     // Allocate the uPy heap using malloc and get the largest available region
     size_t mp_task_heap_size = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
@@ -116,7 +118,7 @@ soft_reset:
 
     // run boot-up scripts
     pyexec_frozen_module("_boot.py");
-    pyexec_file_if_exists("boot.py");
+    pyexec_file_if_exists("/sdcard/boot.py");
     if (pyexec_mode_kind == PYEXEC_MODE_FRIENDLY_REPL) {
         pyexec_file_if_exists("main.py");
     }
@@ -155,6 +157,7 @@ soft_reset:
 }
 
 void app_main(void) {
+    esp_log_level_set("*", ESP_LOG_NONE);
     esp_err_t ret = nvs_flash_init();
     if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
         nvs_flash_erase();
diff --git a/ports/esp32/modules/_boot.py b/ports/esp32/modules/_boot.py
index bf40ea3a9..8aafcc7bc 100644
--- a/ports/esp32/modules/_boot.py
+++ b/ports/esp32/modules/_boot.py
@@ -1,12 +1,10 @@
 import gc
 import uos
-from flashbdev import bdev
+import machine
 
 try:
-    if bdev:
-        uos.mount(bdev, '/')
+    uos.mount(machine.SDCard(), '/sdcard')
 except OSError:
-    import inisetup
-    vfs = inisetup.setup()
+    print(OSError)
 
 gc.collect()
diff --git a/ports/esp32/mpconfigport.h b/ports/esp32/mpconfigport.h
index 6cf86446b..515f167af 100644
--- a/ports/esp32/mpconfigport.h
+++ b/ports/esp32/mpconfigport.h
@@ -192,6 +192,7 @@ extern const struct _mp_obj_module_t mp_module_usocket;
 extern const struct _mp_obj_module_t mp_module_machine;
 extern const struct _mp_obj_module_t mp_module_network;
 extern const struct _mp_obj_module_t mp_module_onewire;
+extern const struct _mp_obj_module_t audio_module;
 
 #define MICROPY_PORT_BUILTIN_MODULES \
     { MP_OBJ_NEW_QSTR(MP_QSTR_esp), (mp_obj_t)&esp_module }, \
@@ -203,6 +204,7 @@ extern const struct _mp_obj_module_t mp_module_onewire;
     { MP_OBJ_NEW_QSTR(MP_QSTR_network), (mp_obj_t)&mp_module_network }, \
     { MP_OBJ_NEW_QSTR(MP_QSTR__onewire), (mp_obj_t)&mp_module_onewire }, \
     { MP_OBJ_NEW_QSTR(MP_QSTR_uhashlib), (mp_obj_t)&mp_module_uhashlib }, \
+    { MP_OBJ_NEW_QSTR(MP_QSTR_audio), (mp_obj_t)&audio_module }, \
 
 #define MP_STATE_PORT MP_STATE_VM
 
diff --git a/ports/esp32/partitions.csv b/ports/esp32/partitions.csv
index 55c225759..741b306bf 100644
--- a/ports/esp32/partitions.csv
+++ b/ports/esp32/partitions.csv
@@ -2,5 +2,5 @@
 # Note: if you change the phy_init or app partition offset, make sure to change the offset in Kconfig.projbuild
 nvs,      data, nvs,     0x9000,  0x6000,
 phy_init, data, phy,     0xf000,  0x1000,
-factory,  app,  factory, 0x10000, 0x180000,
-vfs,      data, fat,     0x200000, 0x200000,
+factory,  app,  factory, 0x10000, 0x300000,
+vfs,      data, fat,     0x310000, 0xF0000,
